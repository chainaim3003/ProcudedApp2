"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_lib_vlei-service_ts";
exports.ids = ["_ssr_lib_vlei-service_ts"];
exports.modules = {

/***/ "(ssr)/./lib/vlei-service.ts":
/*!*****************************!*\
  !*** ./lib/vlei-service.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VLEIService: () => (/* binding */ VLEIService),\n/* harmony export */   createVLEIService: () => (/* binding */ createVLEIService),\n/* harmony export */   generateBran: () => (/* binding */ generateBran)\n/* harmony export */ });\n/* harmony import */ var signify_ts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! signify-ts */ \"(ssr)/./node_modules/signify-ts/dist/index.js\");\n// Real vLEI Service for Phase 2 - FIXED VERSION\n// This service manages actual vLEI credentials using KERIA agents\n// FIX: Added state validation, reconnection logic, and better error handling\n\nclass VLEIService {\n    constructor(config){\n        this.client = null;\n        this.isInitialized = false;\n        this.controllerPrefix = null;\n        this.reconnectAttempts = 0;\n        this.maxReconnectAttempts = 3;\n        this.config = config;\n        this.client = new signify_ts__WEBPACK_IMPORTED_MODULE_0__.SignifyClient(config.keriaUrl, config.bran, config.tier, config.bootUrl);\n    }\n    /**\n   * Validate client state and reconnect if necessary\n   * FIXED: Comprehensive state validation with explicit checks\n   */ async ensureClientConnected() {\n        console.log(\"\\uD83D\\uDD0D Validating client connection...\");\n        // Check if client exists\n        if (!this.client) {\n            console.log(\"‚ö†Ô∏è Client is null, attempting to reinitialize...\");\n            await this.initialize();\n            return;\n        }\n        // Check if client has a controller (which means it's connected)\n        if (!this.client.controller || !this.client.controller.pre) {\n            console.log(\"‚ö†Ô∏è Client controller not available, attempting to reinitialize...\");\n            await this.initialize();\n            return;\n        }\n        // CRITICAL: Explicitly check if state() method exists and returns valid data\n        try {\n            // Check if state method exists\n            if (!this.client.state || typeof this.client.state !== \"function\") {\n                console.warn(\"‚ö†Ô∏è Client.state method not available, reinitializing...\");\n                await this.initialize();\n                return;\n            }\n            // Try to call state() and verify it returns something\n            const stateResult = await this.client.state();\n            if (!stateResult) {\n                console.warn(\"‚ö†Ô∏è Client.state() returned null/undefined, reinitializing...\");\n                await this.initialize();\n                return;\n            }\n            // Verify state has the 'new' method (this is what fails in the error)\n            if (typeof stateResult.new !== \"function\") {\n                console.warn(\"‚ö†Ô∏è Client state is missing required methods, reinitializing...\");\n                await this.initialize();\n                return;\n            }\n            console.log(\"‚úÖ Client connection and state validated successfully\");\n            this.reconnectAttempts = 0;\n            return;\n        } catch (err) {\n            console.warn(\"‚ö†Ô∏è State validation failed:\", err.message);\n            // If state check failed, try to reinitialize\n            if (this.reconnectAttempts < this.maxReconnectAttempts) {\n                this.reconnectAttempts++;\n                console.log(`üîÑ Attempting reconnection (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\n                await new Promise((resolve)=>setTimeout(resolve, 1000 * this.reconnectAttempts));\n                await this.initialize();\n            } else {\n                throw new Error(\"Max reconnection attempts reached. Please restart the service.\");\n            }\n        }\n    }\n    async initialize() {\n        if (this.isInitialized && this.client) {\n            console.log(\"‚úÖ Service already initialized\");\n            return;\n        }\n        try {\n            console.log(\"\\uD83D\\uDE80 Initializing vLEI service...\");\n            await (0,signify_ts__WEBPACK_IMPORTED_MODULE_0__.ready)();\n            // Create new client if needed\n            if (!this.client) {\n                this.client = new signify_ts__WEBPACK_IMPORTED_MODULE_0__.SignifyClient(this.config.keriaUrl, this.config.bran, this.config.tier, this.config.bootUrl);\n            }\n            // Try to connect first (agent might already exist)\n            try {\n                await this.client.connect();\n                console.log(\"‚úÖ Connected to existing KERIA agent\");\n            } catch (connectError) {\n                // If connect fails, boot a new agent (boot automatically connects)\n                console.log(\"\\uD83D\\uDCCB Agent does not exist, booting new agent...\");\n                try {\n                    await this.client.boot();\n                    console.log(\"‚úÖ Agent booted successfully (already connected)\");\n                } catch (bootError) {\n                    // 409 means agent already exists - need to connect instead\n                    if (bootError.message?.includes(\"409\") || bootError.message?.includes(\"Conflict\")) {\n                        console.log(\"‚ö†Ô∏è Agent already exists (409 Conflict), connecting instead...\");\n                        try {\n                            await this.client.connect();\n                            console.log(\"‚úÖ Connected to existing agent after boot conflict\");\n                        } catch (connectAfterBootError) {\n                            console.error(\"‚ùå Failed to connect after boot conflict:\", connectAfterBootError);\n                            throw new Error(\"Agent exists but cannot connect. Please restart KERIA services.\");\n                        }\n                    } else {\n                        console.error(\"‚ùå Failed to boot agent:\", bootError);\n                        console.error(\"‚ùå Error details:\", {\n                            message: bootError?.message,\n                            name: bootError?.name,\n                            stack: bootError?.stack?.split(\"\\n\")[0]\n                        });\n                        throw bootError;\n                    }\n                }\n            }\n            // Get the controller prefix (AID) after connection\n            try {\n                const controllerAID = this.client.controller?.pre;\n                console.log(\"\\uD83D\\uDD11 Controller AID:\", controllerAID);\n                if (controllerAID) {\n                    this.controllerPrefix = controllerAID;\n                } else {\n                    console.warn(\"‚ö†Ô∏è Warning: Controller AID is undefined or null\");\n                }\n            } catch (error) {\n                console.error(\"‚ùå Error accessing controller AID:\", error);\n            }\n            this.isInitialized = true;\n            this.reconnectAttempts = 0;\n            console.log(\"‚úÖ vLEI service initialized successfully\");\n            // CRITICAL: Wait briefly to ensure client state is fully initialized\n            console.log(\"‚è≥ Waiting for client state to stabilize...\");\n            await new Promise((resolve)=>setTimeout(resolve, 500));\n            console.log(\"‚úÖ Client state ready\");\n        } catch (error) {\n            console.error(\"‚ùå Failed to initialize vLEI service:\", error);\n            this.client = null;\n            this.isInitialized = false;\n            throw error;\n        }\n    }\n    async createOrganizationAID(orgInfo) {\n        console.log(`üè¢ Creating organizational AID for ${orgInfo.name}...`);\n        // CRITICAL: Ensure client is connected before proceeding\n        await this.ensureClientConnected();\n        if (!this.client) {\n            throw new Error(\"Client is not initialized after connection check\");\n        }\n        // Double-check client has required properties\n        if (!this.client.identifiers || typeof this.client.identifiers !== \"function\") {\n            console.error(\"‚ùå Client.identifiers is not available\");\n            throw new Error(\"Client identifiers method is not available. Client may not be properly initialized.\");\n        }\n        // CRITICAL: Verify state is available before proceeding\n        if (!this.client.state || typeof this.client.state !== \"function\") {\n            console.error(\"‚ùå Client.state is not available\");\n            throw new Error(\"Client state method is not available. Please reinitialize the service.\");\n        }\n        try {\n            // Test state access before proceeding\n            const stateTest = await this.client.state();\n            if (!stateTest || typeof stateTest.new !== \"function\") {\n                throw new Error(\"Client state is not properly initialized. State.new() method is missing.\");\n            }\n            console.log(\"‚úÖ Pre-flight state validation passed\");\n            // Check if AID already exists\n            try {\n                const existingAid = await this.client.identifiers().get(orgInfo.name);\n                if (existingAid && existingAid.prefix) {\n                    console.log(`‚ÑπÔ∏è AID already exists: ${existingAid.prefix}`);\n                    return existingAid.prefix;\n                }\n            } catch (error) {\n                // AID doesn't exist, continue to create it\n                console.log(`üìù AID does not exist yet, creating new one...`);\n            }\n            // Create new AID\n            console.log(\"\\uD83D\\uDD35 Calling identifiers().create() for:\", orgInfo.name);\n            // Verify identifiers() returns a valid object\n            const identifiersApi = this.client.identifiers();\n            if (!identifiersApi || !identifiersApi.create) {\n                console.error(\"‚ùå identifiers() returned null or has no create method\");\n                console.error(\"‚ùå Client state:\", {\n                    hasClient: !!this.client,\n                    hasController: !!this.client.controller,\n                    controllerPre: this.client.controller?.pre,\n                    hasIdentifiers: !!this.client.identifiers,\n                    identifiersType: typeof this.client.identifiers\n                });\n                throw new Error(\"identifiers() method not properly initialized. Client may need reconnection.\");\n            }\n            const aidResult = await identifiersApi.create(orgInfo.name);\n            if (!aidResult) {\n                throw new Error(\"Failed to create identifier - aidResult is null\");\n            }\n            // Get the operation name if available\n            let opName = null;\n            try {\n                if (typeof aidResult.op === \"function\") {\n                    const opResult = aidResult.op();\n                    opName = opResult?.name || null;\n                }\n            } catch (opError) {\n                console.warn(\"‚ö†Ô∏è Error calling op():\", opError);\n            }\n            if (!opName) {\n                console.log(\"\\uD83D\\uDD04 No operation name, waiting briefly then checking AID...\");\n                await new Promise((resolve)=>setTimeout(resolve, 1000));\n                try {\n                    const aid = (await this.client.identifiers().get(orgInfo.name)).prefix;\n                    console.log(`‚úÖ Organizational AID created: ${aid}`);\n                    return aid;\n                } catch (getError) {\n                    console.error(\"‚ùå Failed to verify AID creation:\", getError);\n                    throw new Error(\"AID creation status uncertain - operation not tracked\");\n                }\n            }\n            // Wait for the operation to complete\n            console.log(`‚è≥ Waiting for operation: ${opName}`);\n            await this.client.operations().wait(opName);\n            const aid = (await this.client.identifiers().get(orgInfo.name)).prefix;\n            console.log(`‚úÖ Organizational AID created: ${aid}`);\n            return aid;\n        } catch (error) {\n            console.error(\"‚ùå Failed to create organizational AID:\", error);\n            // Enhanced error message with retry suggestion\n            let errorMessage = error.message;\n            if (error.message?.includes(\"Cannot read properties of null\") || error.message?.includes(\"state\") || error.message?.includes(\"State.new()\")) {\n                errorMessage = 'Client state error during AID creation. The KERIA agent connection may be unstable. Try: 1) Restart KERIA services, 2) Refresh the page, 3) Click \"Issue Credentials\" again.';\n            }\n            throw new Error(errorMessage);\n        }\n    }\n    async createPersonAID(personInfo) {\n        await this.ensureClientConnected();\n        if (!this.client) {\n            throw new Error(\"Client not initialized\");\n        }\n        try {\n            console.log(`üë§ Creating personal AID for ${personInfo.name}...`);\n            // Check if AID already exists\n            try {\n                const existingAid = await this.client.identifiers().get(personInfo.name);\n                if (existingAid && existingAid.prefix) {\n                    console.log(`‚ÑπÔ∏è AID already exists: ${existingAid.prefix}`);\n                    return existingAid.prefix;\n                }\n            } catch (error) {\n                console.log(`üìù AID does not exist yet, creating new one...`);\n            }\n            const aidResult = await this.client.identifiers().create(personInfo.name);\n            if (!aidResult) {\n                throw new Error(\"Failed to create identifier - aidResult is null\");\n            }\n            // Get the operation name if available\n            let opName = null;\n            try {\n                if (typeof aidResult.op === \"function\") {\n                    const opResult = aidResult.op();\n                    opName = opResult?.name || null;\n                }\n            } catch (opError) {\n                console.warn(\"‚ö†Ô∏è Error calling op():\", opError);\n            }\n            if (!opName) {\n                console.log(\"\\uD83D\\uDD04 No operation name, waiting briefly then checking AID...\");\n                await new Promise((resolve)=>setTimeout(resolve, 1000));\n                try {\n                    const aid = (await this.client.identifiers().get(personInfo.name)).prefix;\n                    console.log(`‚úÖ Personal AID created: ${aid}`);\n                    return aid;\n                } catch (getError) {\n                    console.error(\"‚ùå Failed to verify AID creation:\", getError);\n                    throw new Error(\"AID creation status uncertain - operation not tracked\");\n                }\n            }\n            console.log(`‚è≥ Waiting for operation: ${opName}`);\n            await this.client.operations().wait(opName);\n            const aid = (await this.client.identifiers().get(personInfo.name)).prefix;\n            console.log(`‚úÖ Personal AID created: ${aid}`);\n            return aid;\n        } catch (error) {\n            console.error(\"‚ùå Failed to create personal AID:\", error);\n            throw error;\n        }\n    }\n    async issueOORCredential(orgAid, personAid, personInfo) {\n        await this.ensureClientConnected();\n        if (!this.client) {\n            throw new Error(\"Client not initialized\");\n        }\n        try {\n            console.log(`üìú Issuing OOR credential for ${personInfo.name}...`);\n            const oorSchema = \"EH6ekLjSr8V32WyFbGe1zXjTzFs9PkTYmupJ9H65O14g\";\n            const credentialData = {\n                LEI: personInfo.organizationLEI,\n                personLegalName: personInfo.legalName,\n                officialRole: personInfo.role\n            };\n            const credential = await this.client.credentials().issue(orgAid, personAid, oorSchema, credentialData);\n            console.log(`‚úÖ OOR credential issued: ${credential.sad.d}`);\n            return credential;\n        } catch (error) {\n            console.error(\"‚ùå Failed to issue OOR credential:\", error);\n            throw error;\n        }\n    }\n    async issueECRCredential(orgAid, personAid, personInfo, oorCredentialSAID, spendingLimit, maxContractValue) {\n        await this.ensureClientConnected();\n        if (!this.client) {\n            throw new Error(\"Client not initialized\");\n        }\n        try {\n            console.log(`üìú Issuing ECR credential for ${personInfo.name}...`);\n            const ecrSchema = \"EKA57bKBKxr_kN7iN_zZeBG8aP0Sv-JvpPLdJ1jg3b2g\";\n            const credentialData = {\n                LEI: personInfo.organizationLEI,\n                personLegalName: personInfo.legalName,\n                engagementContextRole: personInfo.role,\n                ...spendingLimit && {\n                    spendingLimit\n                },\n                ...maxContractValue && {\n                    maxContractValue\n                }\n            };\n            const edges = {\n                auth: oorCredentialSAID\n            };\n            const credential = await this.client.credentials().issue(orgAid, personAid, ecrSchema, credentialData, edges);\n            console.log(`‚úÖ ECR credential issued: ${credential.sad.d}`);\n            return credential;\n        } catch (error) {\n            console.error(\"‚ùå Failed to issue ECR credential:\", error);\n            throw error;\n        }\n    }\n    async verifyCredentialChain(ecrCredential, oorCredential, qviCredential) {\n        await this.ensureClientConnected();\n        if (!this.client) {\n            throw new Error(\"Client not initialized\");\n        }\n        try {\n            console.log(\"\\uD83D\\uDD0D Verifying credential chain...\");\n            const ecrValid = await this.client.credentials().verify(ecrCredential);\n            if (!ecrValid) {\n                throw new Error(\"ECR credential signature invalid\");\n            }\n            const linkedOORSAID = ecrCredential.sad.e?.auth;\n            if (linkedOORSAID !== oorCredential.sad.d) {\n                throw new Error(\"ECR does not link to provided OOR credential\");\n            }\n            const oorValid = await this.client.credentials().verify(oorCredential);\n            if (!oorValid) {\n                throw new Error(\"OOR credential signature invalid\");\n            }\n            if (oorCredential.sad.i !== qviCredential.sad.a.i) {\n                throw new Error(\"OOR issuer does not match QVI-verified organization\");\n            }\n            const qviValid = await this.client.credentials().verify(qviCredential);\n            if (!qviValid) {\n                throw new Error(\"QVI credential signature invalid\");\n            }\n            console.log(\"‚úÖ Full credential chain verified!\");\n            return {\n                valid: true,\n                orgLEI: qviCredential.sad.a.LEI,\n                personName: ecrCredential.sad.a.personLegalName,\n                role: ecrCredential.sad.a.engagementContextRole,\n                spendingLimit: ecrCredential.sad.a.spendingLimit,\n                maxContractValue: ecrCredential.sad.a.maxContractValue,\n                details: {\n                    orgName: qviCredential.sad.a.legalName,\n                    lei: qviCredential.sad.a.LEI,\n                    personName: ecrCredential.sad.a.personLegalName,\n                    role: ecrCredential.sad.a.engagementContextRole,\n                    spendingLimit: ecrCredential.sad.a.spendingLimit,\n                    maxContractValue: ecrCredential.sad.a.maxContractValue\n                }\n            };\n        } catch (error) {\n            console.error(\"‚ùå Credential chain verification failed:\", error);\n            return {\n                valid: false,\n                orgLEI: \"\",\n                personName: \"\",\n                role: \"\",\n                details: {\n                    error: error.message\n                }\n            };\n        }\n    }\n    async getCredentials(aid) {\n        await this.ensureClientConnected();\n        if (!this.client) {\n            throw new Error(\"Client not initialized\");\n        }\n        try {\n            const credentials = await this.client.credentials().list(aid);\n            return credentials;\n        } catch (error) {\n            console.error(\"‚ùå Failed to get credentials:\", error);\n            throw error;\n        }\n    }\n    async revokeCredential(credentialSAID) {\n        await this.ensureClientConnected();\n        if (!this.client) {\n            throw new Error(\"Client not initialized\");\n        }\n        try {\n            console.log(`üóëÔ∏è Revoking credential: ${credentialSAID}`);\n            await this.client.credentials().revoke(credentialSAID);\n            console.log(\"‚úÖ Credential revoked successfully\");\n        } catch (error) {\n            console.error(\"‚ùå Failed to revoke credential:\", error);\n            throw error;\n        }\n    }\n    getControllerAID() {\n        return this.controllerPrefix;\n    }\n    isServiceInitialized() {\n        return this.isInitialized && !!this.client;\n    }\n    async cleanup() {\n        console.log(\"\\uD83E\\uDDF9 Cleaning up vLEI service...\");\n        this.client = null;\n        this.controllerPrefix = null;\n        this.isInitialized = false;\n        this.reconnectAttempts = 0;\n    }\n}\n// Factory function to create vLEI service instances\nfunction createVLEIService(config) {\n    return new VLEIService(config);\n}\n// Utility function to generate random bran\nfunction generateBran() {\n    return (0,signify_ts__WEBPACK_IMPORTED_MODULE_0__.randomPasscode)();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./lib/vlei-service.ts\n");

/***/ })

};
;